<?php

/** @noinspection PhpMissingReturnTypeInspection */

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ namespacedParentModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ requestFullModel }};
use {{ resourceFullModel }};
use Illuminate\Http\Request;

class {{ class }} extends Controller
{
    public function index(Request $request, {{ parentModel }} ${{ parentModelVariable }})
    {
        if ($term = $request->q) {
            ${{ pluralModelVariable }} = ${{ parentModelVariable }}->{{ pluralModelVariable }}()->where('name', 'like', "%$term%")->paginate();
        } else {
            ${{ pluralModelVariable }} = ${{ parentModelVariable }}->{{ pluralModelVariable }}()->paginate();
        }
        return {{ resourceModel }}::collection(${{ pluralModelVariable }});
    }

    public function store({{ requestModel }} $request, {{ parentModel }} ${{ parentModelVariable }})
    {
        $fields = $request->validated();
        $fields['{{ parentModelVariable }}_id'] = ${{ parentModelVariable }}->id;

        ${{ modelVariable }} = {{ model }}::create($fields);
        return new {{ resourceModel }}(${{ modelVariable }});
    }

    public function show({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});
        return new {{ resourceModel }}(${{ modelVariable }});
    }

    public function update({{ requestModel }} $request, {{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});

        $fields = $request->validated();
        ${{ modelVariable }}->update($fields);
        return new {{ resourceModel }}(${{ modelVariable }});
    }

    public function destroy({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        $this->validateParentModel(${{ parentModelVariable }}, ${{ modelVariable }});
        ${{ modelVariable }}->delete();
    }

    private function validateParentModel({{ parentModel }} ${{ parentModelVariable }}, {{ model }} ${{ modelVariable }})
    {
        if (${{ parentModelVariable }}->isNot(${{ modelVariable }}->{{ parentModelVariable }})) throw new ModelNotFoundException('{{ model }} does not belong to this {{ parentModel }}');
    }
}
